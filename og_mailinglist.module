<?php
// $Id$
// TODO -- rewrite this header part according to the normal style
// TODO write docs for functions.
###############################################################################
###   This module allows users to email a Drupal installation running the
###   Exim email server to create discussions and respond to comments.
###   Because it is tied directly to Exim, emails are processed immediately
###   upon receipt in the mail server.  Mails should be sent to purl_group_name@server.com
###   rather than to a single email address.
###
###   Original version written by Conan Albrecht   March 2009
###

require_once("phpmailer/class.phpmailer.php");
require_once("og_mailinglist_phpmailer.inc");
require_once('og_mailinglist_api.inc');

/** Implementation of hook_menu(). */
function og_mailinglist_menu() {
  # Administration
  $items['admin/messaging/og_mailinglist'] = array(
    'title' => 'OG Mailinglist',
    'description' => t('Configure discussions/comments generated from email'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_mailinglist_admin_settings'),
    'access arguments' => array('administer notifications'),
  );
  $items['og_mailinglist/subscriptions'] = array(
    'title' => t('Manage Group Subscriptions'),
    'description' => t('Allows users to manage their space subscriptions'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('og_mailinglist_subscriptions_settings_form'),
    'access arguments' => array('create blog entries'), // This is a hack to 
    // restrict access to authenticated users as can't restrict menu items by role AFAIK.
    // TODO right thing to do actually is define new permission for this module... Silly me.
  );
  $items['og_mailinglist/unsubscribe/%node'] = array(
    'title' => t('Unsubscribe from discussion'),
    'description' => t('Users who hit this page will not get more emails for
                       comments on the node.'),
    'page callback' => 'og_mailinglist_unsubscribe_thread',
    'page arguments' => array(2),
    'access arguments' => array('create blog entries'), // This is a hack to 
    // restrict access to authenticated users as can't restrict menu items by role AFAIK.
  );
  $items['og_mailinglist/subscribe/%node'] = array(
    'title' => t('Subscribe to discussion'),
    'description' => t('Users who hit this page will not get more emails for
                       comments on the node.'),
    'page callback' => 'og_mailinglist_subscribe_thread',
    'page arguments' => array(2),
    'access arguments' => array('create blog entries'), // This is a hack to 
    // restrict access to authenticated users as can't restrict menu items by role AFAIK.
  );
  return $items;
}

/*
 * Implementation of hook_init().
 */
function og_mailinglist_init() {
  drupal_add_css(drupal_get_path('module', 'og_mailinglist') . "/og_mailinglist.css");
  drupal_add_js(drupal_get_path('module', 'og_mailinglist') . "/og_mailinglist.js");
}

/** Implementation of hook_help */
function og_mailinglist_help($path, $arg) {
  switch ($path) {
    case 'admin/messaging/og_mailinglist':
      return '<p>' . t("OG_Mailinglist allows users to start new discussions by email and post comments on existing discussions
       by simply replying to emails.  It plugs directly into the Exim mail server, which allows it to process emails
       immediately upon receipt in the system.  It assumes you are using the Organic Groups, Spaces, and PURL modules for groups.  It also assume your installed mail server is Exim 4. 
       Instructions are as follows:
       <ul>
         <li>To start a discussion, a group member should send email to groupname@yoursite.com.
         <li>To post a comment on an existing discussion, a group member should simply reply to the autogenerated
             email he or she receives.
       </ul> 
       Important notes:
       <ul>
         <li>You must customize the DRUPAL_DIR variable in og_mailinglist_exim4_bootstramp_command_line.php file to point at your
             Drupal installation.  
         <li>You must install the router and transport into your Exim4 configuration files.  See the documentation for information
             about setting this up and testing it.
         <li>This module essentially allows group members to post to your site directly from their email box -- it bypasses
             their login name and password and simply matches the email address.  This can be spoofed by anyone smart enough 
             to do it.  The module has some security in place, but by its very nature, it is a potential security risk.  Use
             this module only on sites where this is acceptable.
       </ul>");
  }
}

/** Admin settings form */
function og_mailinglist_admin_settings() {
  $form['og_mailinglist_server_string'] = array(
    '#title' => t('Domain name'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_server_string', 'example.com'),
    '#description' => t('Domain name for outgoing/incoming emails, e.g. example.com.'),
  );
  $form['og_mailinglist_max_message_size'] = array(
    '#title' => t('Maximum message size (in Kb)'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_max_message_size', '100'),
    '#description' => t('Any messages over this size will be rejected.  Set to 0 for unlimited.'),
  );
  $form['og_mailinglist_max_posts_per_hour'] = array(
    '#title' => t('Maximum posts per hour'),
    '#type' => 'textfield',
    '#default_value' => variable_get('og_mailinglist_max_posts_per_hour', '20'),
    '#description' => t('The maximum number of messages a user is able to post per hour by email.  Set to 0 for unlimited.'),
  );
// TODO add form to choose default content type
  return system_settings_form($form);
}

function og_mailinglist_subscriptions_settings_form() {
  global $user;
  
  $sql = 'SELECT m.sid as gid, m.subscription_type, n.title
          FROM {og_mailinglist_subscription} m, {node} n
          WHERE m.sid = n.nid
          AND m.uid = %d
          AND m.space_type = "og"
          ORDER BY n.title';
  
  $results = db_query($sql, $user->uid);
  
  $subscription_options = array(
    'email' => t('Email'),
    'no email' => t('No email'),
    'digest email' => t('Digest email'),
  );
  // TODO improve formatting + add way to unsubscribe from group (checkboxs maybe)?
  $form = array();
  
  while ($data = db_fetch_array($results)) {
    $form['og_mailinglist_og'][$data['gid']] = array(
      '#type' => 'select',
      '#title' => l(t($data['title']), "node/" . $data['gid']),
      '#default_value' => $data['subscription_type'],
      '#options' => $subscription_options,
    );
  }
  
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save')
    );
  
  return $form;
}

function og_mailinglist_subscriptions_settings_form_submit($form, &$form_state) {
  global $user;
  foreach ($form_state['values'] as $gid => $sub_type) {
    // We only care about GIDs and their values.
    if (is_numeric($gid)) {
      db_query("UPDATE {og_mailinglist_subscription}
               SET subscription_type = '%s'
               WHERE uid = %d
               AND sid = %d
               AND space_type = 'og'", $sub_type, $user->uid, $gid);
      
      if ($sub_type != "email") {
        og_mailinglist_delete_group_threads($gid, $user->uid);
      }
    }
  }
  drupal_set_message("Group subscriptions updated.");
}

function og_mailinglist_unsubscribe_thread($node) {
  global $user;
  $success = og_mailinglist_delete_thread_subscription($node->nid, $user->uid);
  
  if ($success) {
    return "<div class='messages success'>You were successfully unsubscribed from
    the discussion <em>" . l($node->title, "node/" . $node->nid) . " </em>&nbsp;&nbsp; 
     " . l("Undo", "og_mailinglist/subscribe/" . $node->nid, array("attributes" => array("id" => "og_mailinglist_undo")))
           . "</div>";
  }
}

function og_mailinglist_subscribe_thread($node) {
  global $user;
  og_mailinglist_save_thread_subscriptions($node->nid, array($user->uid));
  
  return "<div class='messages success'>You were successfully subscribed to
    the discussion <em>" . l($node->title, "node/" . $node->nid) . " </em>&nbsp;&nbsp; 
     " . l("Undo", "og_mailinglist/unsubscribe/" . $node->nid, array("attributes" => array("id" => "og_mailinglist_undo")))
           . "</div>";
}

// TODO copy regexes to filter.
  ////file_save_data(var_export($mailbody, true), '/tmp/messaging_object.txt', FILE_EXISTS_RENAME);
  //# strip off anything below the email signature, assuming the user has a standard signature separator
  //$search = preg_match_all("/^-- [\n\r]*$/m", $mailbody, $matches, PREG_OFFSET_CAPTURE);
  //if (!empty($matches[0])) {
  //  $temp = end($matches[0]);
  //  $mailbody = substr($mailbody, 0, $temp[1]); # parse last one off, since that is probably the signature
  //}
  //# Remove Gmail cruft-- remove the reply start text (On this date, so and so said...)
  //$gmail_search = preg_match("/On\s[a-zA-Z]{3},\s[a-zA-Z]{3}\s[0-9]{1,2},\s[0-9]{4}\sat\s[0-9]{1,2}:[0-9]{2}\s[PM|AM]/s",
  //                           $mailbody, $gmail_matches, PREG_OFFSET_CAPTURE);
  //if (!empty($gmail_matches[0])) {
  //  $mailbody = substr($mailbody, 0, $gmail_matches[0][1]);
  //}
  //
  //# Remove Outlook cruft.
  //$outlook_search = preg_match("/-{4,7}Original.Message-{4,7}.From:\s[a-zA-Z\s.\-@\[\]_123:]{0,100}(Sender|Sent):\s/s",
  //                     $mailbody, $outlook_matches, PREG_OFFSET_CAPTURE);
  //if (!empty($outlook_matches[0])) {
  //  $mailbody = substr($mailbody, 0, $outlook_matches[0][1]);
  //}
  //
  //# Remove unknown email client #1 cruft.
  //# Sample text = From: Matthew Ehle information-systems@island.byu.edu [1] To: nrodgers@byu.net [2] Sent: Monday, August 17, 2009 1:18:59 PM Subject: [Information Systems] Java Programmer
  //$client1_search = preg_match("/From:.[a-zA-Z]{3,}.[a-zA-Z]{3,}\s[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\.[a-zA-Z.]{2,5}.*To:.*@.*Sent:.*,.*Subject:/s",
  //                     $mailbody, $client1_matches, PREG_OFFSET_CAPTURE);
  //if (!empty($client1_matches[0])) {
  //  $mailbody = substr($mailbody, 0, $client1_matches[0][1]);
  //}
  //
  //# Remove unknown email cilent #2 cruft.
  //# Sample text = On Aug 13, 2009, at 12:36 PM, Jonathan B Criddle wrote:
  //$client2_search = preg_match("/On\s[a-zA-Z]{3}\s[0-9]{1,2},\s[0-9]{4},\sat\s[0-9:]{4,5}.[AMP]{2},/",
  //                     $mailbody, $client2_matches, PREG_OFFSET_CAPTURE);
  //if (!empty($client2_matches[0])) {
  //  $mailbody = substr($mailbody, 0, $client2_matches[0][1]);
  //}
  //
  //# Remove unknown email cilent #3 cruft.
  ///* Sample text:
  //  > To: jwfergie@hotmail.com
  //> Subject: Re: [Information Systems] Win7 a win
  //> From: information-systems@island.byu.edu
  //> Date: Fri, 21 Aug 2009 13:48:47 -0600
  //> 
  //> */
  //$client3_search = preg_match("/>.To:.[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\.[a-zA-Z.]{2,5}[>\s]{2,}Subject:.Re:.\[[a-zA-Z\s]{3,}\].[a-zA-Z0-9\s>]{3,}From:.[a-zA-Z0-9._-]+@[a-zA-Z0-9-]+\.[a-zA-Z.]{2,5}/s",
  //                     $mailbody, $client3_matches, PREG_OFFSET_CAPTURE);
  //if (!empty($client3_matches[0])) {
  //  $mailbody = substr($mailbody, 0, $client3_matches[0][1]);
  //}
  //

/*
 * Implementation of hook_nodeapi().
 */
function og_mailinglist_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == "insert" && $node->status && $node->type != "eduglu_group_reader_feed") { // TODO create hook so individual features can turn off
    // email notifications + on admin interface, let people turn off notifications there as well.
    og_mailinglist_send_node_email($node);
  }
}

function og_mailinglist_comment($comment, $op) {
  // $comment can be an object or an array.
  $comment = (object)$comment;

  if ($op == 'publish') {
    // Check that the node is published.
    $node = node_load($comment->nid);    
    if ($node->status) {
      og_mailinglist_send_comment_email($comment, $node);
      
      // User might not be subscribed to thread. Subscribe them now.
      og_mailinglist_save_thread_subscriptions($comment->nid, array($comment->uid));
    }
  }
}

/**
 * Implementation of hook_og().
 *
 * Add a og_mailinglist subscription when a user joins a group
 * and delete should they leave.
 */
function og_mailinglist_og($op, $gid, $uid, $args) {
  switch ($op) {
    case 'user insert':
      og_mailinglist_save_group_subscriptions($gid, 'og', array($uid));
      break;
    
    case 'user delete':
      og_mailinglist_delete_group_subscriptions($gid, 'og', array($uid));
      break;
  }
}

/**
 * Implementation of hook_filter().
 */
function og_mailinglist_filter($op, $delta = 0, $format = -1, $text = "") {
  switch ($op) {
  
    case 'list':
      return array(
        0 => t('Hide quoted text from comments created via email')
      );
    
    case 'description':
      return t('Finds quoted text from comments created via email and hides them.');
      
    case 'prepare':
      return $text;
    
    case 'process':
      return _og_mailinglist_build_quotes_toggle($text);
      
  }
}

function _og_mailinglist_build_quotes_toggle($text) {
  $quotes = _og_mailinglist_filter_quotes($text);
  foreach ($quotes as $quote) {
    $replace = '<br /><span class="toggle-quoted-text">- Show quoted text -</span><div class="quoted-text">'. $quote .'</div>';
    $text = str_replace($quote, $replace, $text); 
  }  
  
  return $text;
}

/*
 * Loops through the text line by line. If a line matches the header of
 * an email client's quoted section, that line is marked as a beginning of a
 * quoted section. Each succeeding line which starts with a ">"
 * (the traditional indicator for email quote) is included in the quoted section.
 **/
function _og_mailinglist_filter_quotes($text) {
  $lines = explode("\n", $text);
  $quotes = array();
  $count = 0;
  foreach ($lines as $line) {
    if (preg_match("/On\s[a-zA-Z]{3},\s[a-zA-Z]{3}\s[0-9]{1,2},\s[0-9]{4}\sat\s[0-9]{1,2}:[0-9]{2}\s[PM|AM]/s", #Gmail
                             $line, $matches)
      || preg_match("/On\s[a-zA-Z]{3}\s[0-9]{2},\s[0-9]{4},\sat\s[0-9]{2}:[0-9]{2}\s(AM|PM),\s/s", #Apple mail
                            $line, $matches)) {
      $quotes[$count][] = $line;
      $in_quote = true;
    }
    else if ($in_quote && (trim($line) === "" || substr(trim($line), 0, 1) === ">")) {
      $quotes[$count][] = $line;
    }
    else {
      $in_quote = false;
      $count++;
    }
  }
  $quotes_imploded = array();
  foreach ($quotes as $quote) {
    $quotes_imploded[] = implode($quote, "\n");
  }
  
  return $quotes_imploded;
}